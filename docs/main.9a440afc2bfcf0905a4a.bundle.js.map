{"version":3,"file":"main.9a440afc2bfcf0905a4a.bundle.js","sources":["webpack:///./packages/line/src/style.js","webpack:///./packages/line/src/index.js","webpack:///./packages/hemicycle/src/style.js","webpack:///./packages/hemicycle/src/index.js","webpack:///./packages/barcode/src/index.js","webpack:///./packages/bigNumber/src/style.js","webpack:///./packages/bigNumber/src/index.js","webpack:///./packages/pollOfPolls/src/style.js","webpack:///./packages/pollOfPolls/src/chart.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const LineContainer = styled.div`\n  svg {\n    overflow: visible;\n  }\n\n  text {\n    font: 13px \"GillSansMTStd-Medium\";\n    fill: #768692;\n  }\n\n  .line {\n    stroke-width: 2px;\n  }\n\n  .axis {\n    path {\n      stroke: #dbdbdb;\n      stroke-width: 1px;\n    }\n\n    .domain {\n      display: none;\n    }\n  }\n\n  .xAxis {\n    text-anchor: \"middle\";\n  }\n\n  .yAxis {\n    .tick:last-of-type > text {\n      transform: translateY(5px);\n    }\n\n    .tick:first-of-type > text {\n      transform: translateY(-5px);\n    }\n  }\n\n  .line {\n    fill: none;\n  }\n\n  .breaks {\n    stroke: #d3d3d3;\n    stroke-width: 1px;\n    stroke-dasharray: 2px, 2px;\n  }\n\n  .tick line {\n    display: none;\n  }\n\n  .stroked {\n    stroke-dasharray: 5px, 5px !important;\n    stroke: rgba(108, 116, 123, 0.5);\n    stroke-width: 1px;\n  }\n`;\n","// Libraries\nimport React from \"react\";\nimport * as selection from \"d3-selection\";\nimport * as jetpack from \"d3-jetpack\";\nimport * as scale from \"d3-scale\";\nimport * as array from \"d3-array\";\nimport * as axis from \"d3-axis\";\nimport * as shape from \"d3-shape\";\nimport * as timeFormat from \"d3-time-format\";\nimport * as time from \"d3-time\";\nimport * as transition from \"d3-transition\";\nimport * as ease from \"d3-ease\";\nimport * as format from \"d3-format\";\nimport * as interpolate from \"d3-interpolate\";\nimport * as annotation from \"d3-svg-annotation\";\n\nimport { LineContainer } from \"./style\";\n\nconst d3 = {\n  ...selection,\n  ...jetpack,\n  ...scale,\n  ...array,\n  ...axis,\n  ...shape,\n  ...timeFormat,\n  ...time,\n  ...transition,\n  ...ease,\n  ...format,\n  ...interpolate,\n  ...annotation\n};\n\nexport class Line extends React.Component {\n  drawChart(node) {\n    node.innerHTML = \"\";\n    const { width } = node.getBoundingClientRect();\n    let height = width < 450 ? 200 : 400;\n\n    const config = {\n      padding: 0,\n      margin: {\n        top: 50,\n        right: 50,\n        left: 50,\n        bottom: 50\n      },\n      line: d3.line(),\n      area: d3.area(),\n      dataset: this.props.data,\n      formatTime: d3.timeFormat(\"%b ' %y\"),\n      xDomain: d3.extent(this.props.data.map(e => e.date)),\n      yDomain: this.props.yDomain,\n      lines: this.props.lines,\n      xTicks: 4,\n      yTicks: 4\n    };\n    config.usableWidth = width - config.margin.left - config.margin.right;\n    config.usableHeight = height - config.margin.top - config.margin.bottom;\n    config.xScale = d3\n      .scaleTime()\n      .domain(config.xDomain)\n      .range([0, config.usableWidth]);\n    config.yScale = d3\n      .scaleLinear()\n      .domain(config.yDomain)\n      .range([config.usableHeight, 0]);\n\n    config.xTickAmount = config.xTicks;\n    config.yTickAmount = config.yTicks;\n\n    //define axis\n    const xAxis = d3\n      .axisBottom()\n      .scale(config.xScale)\n      .tickFormat(config.formatTime)\n      .ticks(config.xTickAmount);\n\n    const yAxis = d3\n      .axisLeft()\n      .scale(config.yScale)\n      .ticks(config.yTickAmount);\n    if (this.props.percentage) {\n      yAxis.tickFormat((d, i, n) => (n[i + 1] ? d : d + \"%\"));\n    }\n\n    //defining svg\n    const svg = d3\n      .select(node)\n      .append(\"svg\")\n      .at({\n        width: width,\n        height: height\n      });\n\n    //Defining a group element for line chart\n    const g = svg.append(\"g\");\n    g.translate([config.margin.left, config.margin.top]);\n\n    //Create axes\n    g.append(\"g\")\n      .at({\n        class: [\"axis\", \"xAxis\"].join(\" \")\n      })\n      .translate([0, config.usableHeight])\n      .call(xAxis);\n\n    g.append(\"g\")\n      .at({\n        class: [\"axis\", \"yAxis\"].join(\" \")\n      })\n      .translate([0, 0])\n      .call(yAxis);\n\n    //Draw lines\n    const line = config.line\n      .x(d => config.xScale(d.date))\n      .y(d => config.yScale(d.value))\n      .curve(this.props.curve ? d3.curveBasis : d3.curveLinear);\n\n    const lines = g\n      .selectAll(\".line\")\n      .data([config.dataset])\n      .enter()\n      .append(\"g\")\n      .at({\n        class: \"line\"\n      });\n\n    lines\n      .append(\"path\")\n      .at({\n        d: line\n      })\n      .st({\n        stroke: \"#254251\"\n      });\n\n    //Draw area/s\n    if (this.props.area === true) {\n      const area = config.area\n        .x(d => config.xScale(d.date))\n        .y1(d => config.yScale(d.value))\n        .y0(() => config.yScale.range()[0])\n        .curve(this.props.curve ? d3.curveBasis : d3.curveLinear);\n\n      g.selectAll(\".area\")\n        .data([config.dataset])\n        .enter()\n        .append(\"path\")\n        .at({ class: \"area\", d: area, fill: \"#254151\" });\n    }\n\n    if (this.props.annotation) {\n      const importAnnotation = [\n        {\n          type: annotation.annotationLabel,\n          note: {\n            title: this.props.annotation.title,\n            label: \"\",\n            wrap: 50\n          },\n          x: config.xScale(this.props.annotation.x),\n          y: config.yScale(this.props.annotation.y),\n          dx: this.props.annotation.dx,\n          dy: this.props.annotation.dy\n        }\n      ];\n\n      const makeAnnotation = annotation\n        .annotation()\n        .type(annotation.annotationLabel)\n        .annotations(importAnnotation);\n\n      g.append(\"g\")\n        .at({ class: \"annotation\" })\n        .call(makeAnnotation);\n    }\n  }\n\n  componentDidMount() {\n    if (this.chart && this.props.data) this.drawChart(this.chart, this.props);\n  }\n\n  componentDidUpdate() {\n    if (this.chart && this.props.data) this.drawChart(this.chart, this.props);\n  }\n\n  render() {\n    return (\n      <LineContainer>\n        <div ref={node => (this.chart = node)} />\n      </LineContainer>\n    );\n  }\n}\n\nexport default Line;\n","import styled from \"styled-components\";\nimport { breakpoints } from \"@times-visuals/styles\";\n\nexport const HemicycleContainer = styled.div`\n  width: 100%;\n  text-align: center;\n  padding: 2rem 0 2rem 0;\n\n  svg {\n    background-color: unset !important;\n  }\n`;\n\nexport const LegendContainer = styled.ul`\n  list-style-type: none;\n  margin: 0;\n  width: 100%;\n  padding: 1rem 0 1rem 0;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-evenly;\n  border-top: 1px solid #ddd;\n  border-bottom: 1px solid #ddd;\n  margin-bottom: 2rem;\n\n  @media only screen and (max-width: ${breakpoints.mobile}) {\n    padding-top: 15px;\n  }\n\n  li {\n    width: 33%;\n\n    @media only screen and (max-width: ${breakpoints.mobile}) {\n      padding-bottom: 1rem;\n    }\n\n    i {\n      position: absolute;\n      display: inline-block;\n      content: \"\";\n      width: 10px;\n      height: 10px;\n      margin: 0 0.4rem;\n      -moz-border-radius: 10px;\n      -webkit-border-radius: 10px;\n      border-radius: 10px;\n      transform: translate(-40px, 3px);\n    }\n\n    h1 {\n      margin: 0;\n      line-height: 1em;\n      font-family: \"TimesModern-Bold\", serif;\n      -webkit-font-smoothing: auto;\n      -moz-osx-font-smoothing: grayscale;\n      font-size: 20px;\n      font-weight: normal;\n      color: #000;\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { drawChart } from \"./chart\";\nimport { makeParliament } from \"./parliament\";\n\nimport { HemicycleContainer, LegendContainer } from \"./style\";\n\nexport class Hemicycle extends React.Component {\n  componentDidMount() {\n    const { data } = this.props;\n    drawChart(this.chart, data, makeParliament);\n  }\n\n  render() {\n    const { data, showLegend } = this.props;\n\n    return (\n      <HemicycleContainer>\n        <div ref={node => (this.chart = node)} />\n\n        {showLegend && (\n          <LegendContainer>\n            {data.map((e, key) => (\n              <li key={key}>\n                <i style={{ \"background-color\": e.color }} />\n\n                <h1>{e.seats}</h1>\n\n                {e.longName || e.name}\n              </li>\n            ))}\n          </LegendContainer>\n        )}\n      </HemicycleContainer>\n    );\n  }\n}\n\nexport default Hemicycle;\n","import React from \"react\";\n\nimport { drawChart } from \"./chart\";\nimport { BarcodeContainer } from \"./style\";\n\nclass Barcode extends React.Component {\n  clearChart = node => {\n    if (node) node.innerHTML = \"\";\n  };\n\n  drawChart = () => {\n    const { data, valueField, config } = this.props;\n\n    this.clearChart(this.node);\n\n    drawChart(this.node, data, valueField, config);\n  };\n\n  componentDidMount() {\n    this.drawChart();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.data !== this.props.data) {\n      this.drawChart();\n    }\n  }\n\n  render() {\n    return (\n      <BarcodeContainer>\n        <svg ref={node => (this.node = node)} />\n      </BarcodeContainer>\n    );\n  }\n}\n\nexport default Barcode;\n","import styled from \"styled-components\";\nimport { breakpoints } from \"@times-visuals/styles\";\n\nconst smoothingRules = `\n  font-smoothing: grayscale;\n  -webkit-font-smoothing: grayscale;\n  -moz-osx-font-smoothing: grayscale;\n`;\n\nexport const BigNumberContainer = styled.div`\n  h1 {\n    color: ${props => props.color || \"#333\"}\n    width: 100%;\n    line-height: 1.1em;\n    font-family: \"TimesModern-Bold\";\n    font-size: 4.8rem;\n    ${smoothingRules}\n\n    @media only screen and (min-width: ${breakpoints.mobile}) {\n      font-size: 6.4rem;\n\n      ${props => {\n        switch (props.type) {\n          case \"big\":\n            return `font-size: 6.4rem;`;\n        }\n      }}\n    }\n\n    @media only screen and (min-width: ${breakpoints.tablet}) {\n      ${props => {\n        switch (props.type) {\n          case \"big\":\n            return `font-size: 11rem;`;\n        }\n      }}\n    }\n\n    @media only screen and (min-width: ${breakpoints.desktop}) {\n      font-size: 8rem;\n\n      ${props => {\n        switch (props.type) {\n          case \"big\":\n            return `font-size: 14rem;`;\n        }\n      }}\n    }\n  }\n\n  label {\n    width: 100%;\n    color: #425563;\n    font-size: 1.5rem;\n    line-height: 1.2em;\n    font-family: \"GillSansMTStd-Medium\";\n    ${smoothingRules}\n\n    @media only screen and (min-width: ${breakpoints.mobile}) {\n      font-size: 1.9rem;\n    }\n  }\n`;\n","import React from \"react\";\nimport CountUp from \"react-countup\";\n\nimport { BigNumberContainer } from \"./style\";\n\nexport const BigNumber = ({\n  number,\n  label,\n  color,\n  type,\n  suffix,\n  prefix,\n  defaultStart = 0\n}) => (\n  <BigNumberContainer type={type} color={color}>\n    <h1>\n      {number === 0 ? (\n        number\n      ) : (\n        <CountUp\n          start={defaultStart}\n          end={number}\n          suffix={suffix}\n          prefix={prefix}\n          useEasing={true}\n          separator=\",\"\n        />\n      )}\n    </h1>\n\n    <label>{label}</label>\n  </BigNumberContainer>\n);\n\nexport default BigNumber;\n","import styled from \"styled-components\";\nimport { breakpoints } from \"@times-visuals/styles\";\n\nexport const PollOfPollsContainer = styled.div`\n  svg {\n    overflow: visible;\n    font-size: initial;\n  }\n\n  text,\n  .text {\n    font-family: GillSansMTStd-Medium, GillSansW01-Medium;\n    fill: #696969;\n    color: #696969;\n    font-size: 12px;\n  }\n\n  .tick line {\n    display: unset !important;\n    stroke: lightgrey;\n    stroke-width: 1px;\n    shape-rendering: crispEdges;\n    stroke-dasharray: 5;\n  }\n\n  .domain {\n    display: none;\n  }\n\n  ul {\n    width: 100%;\n    margin: 0;\n    list-style-type: none;\n    margin-top: 1px;\n    padding-bottom: 1.5em;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n    border-top: 1px solid #ddd;\n    border-bottom: 1px solid #ddd;\n    padding-top: 1rem;\n\n    li {\n      width: 33%;\n      transform: translateX(30%);\n      font-family: GillSansMTStd-Medium, GillSansW01-Medium;\n      fill: #696969;\n      color: #696969;\n      font-size: 12px;\n      padding-bottom: 1rem;\n\n      @media only screen and (min-width: ${breakpoints.mobile}) {\n        width: 16.66%;\n        padding-bottom: 0;\n      }\n    }\n\n    @media only screen and (max-width: ${breakpoints.mobile}) {\n      padding-top: 15px;\n    }\n\n    i {\n      position: absolute;\n      display: inline-block;\n      content: \"\";\n      width: 10px;\n      height: 10px;\n      margin: 0 0.4rem;\n      -moz-border-radius: 10px;\n      -webkit-border-radius: 10px;\n      border-radius: 10px;\n      transform: translate(-20px, 3px);\n    }\n\n    label {\n      font-family: TimesModern-Bold;\n      -webkit-font-smoothing: auto;\n      -moz-osx-font-smoothing: grayscale;\n      font-size: 20px;\n      font-weight: 800;\n      color: #000;\n      fill: #000;\n      display: block;\n    }\n  }\n\n  caption {\n    width: 100%;\n    font-size: 12px;\n    color: #666;\n    margin: 1rem 0;\n  }\n`;\n","import * as selection from \"d3-selection\";\nimport * as jetpack from \"d3-jetpack\";\nimport * as scale from \"d3-scale\";\nimport * as timeFormat from \"d3-time-format\";\nimport * as array from \"d3-array\";\nimport * as shape from \"d3-shape\";\nimport * as axis from \"d3-axis\";\n\nconst d3 = {\n  ...selection,\n  ...jetpack,\n  ...scale,\n  ...timeFormat,\n  ...array,\n  ...shape,\n  ...axis\n};\n\nexport const drawChart = (node, props, state) => {\n  // check if start and end date properties are set and if so, filter the polling data and averages\n  const startDate = props.startDate ? new Date(props.startDate) : null;\n\n  const endDate = props.endDate ? new Date(props.endDate) : null;\n\n  const dataset = startDate\n    ? endDate\n      ? state.polls\n          .filter(poll => poll.date > startDate)\n          .filter(poll => poll.date < endDate)\n      : state.polls.filter(poll => poll.date >= startDate)\n    : endDate\n    ? state.polls.filter(poll => poll.date <= endDate)\n    : state.polls;\n\n  const averages = startDate\n    ? endDate\n      ? state.averages\n          .filter(average => average.date >= startDate)\n          .filter(average => average.date <= endDate)\n      : state.averages.filter(average => average.date >= startDate)\n    : endDate\n    ? state.averages.filter(average => average.date <= endDate)\n    : state.averages;\n\n  node.innerHTML = \"\";\n  const { width } = node.getBoundingClientRect();\n  const config = {\n    padding: 0,\n    height: 450,\n    opacity: 0.2,\n    ticksno: 5,\n    extent: [0, 35],\n    margin: {\n      top: 50,\n      right: 50,\n      left: 50,\n      bottom: 50\n    },\n    dataset: dataset,\n    averages: averages,\n    parties: props.parties,\n    circleRadius: props.circleRadius ? props.circleRadius : 4,\n    yDomainFromProps: props.yDomain ? props.yDomain : null,\n    startDate: startDate,\n    endDate: endDate,\n    get yExtent() {\n      return d3.extent(config.dataset.map(e => e.poll));\n    },\n    get usableWidth() {\n      return width - config.margin.left - config.margin.right;\n    },\n    get usableHeight() {\n      return config.height - config.margin.top - config.margin.bottom;\n    },\n    get xScale() {\n      return d3\n        .scaleTime()\n        .range([0, config.usableWidth])\n        .domain([\n          config.startDate ? config.startDate : new Date(\"2018-03-01\"),\n          config.endDate ? config.endDate : new Date(\"2018-10-31\")\n        ]);\n    },\n    get yScale() {\n      return d3\n        .scaleLinear()\n        .range([config.usableHeight, 0])\n        .domain(\n          config.yDomainFromProps ? config.yDomainFromProps : config.yExtent\n        );\n    }\n  };\n\n  const svg = d3\n    .select(node)\n    .append(\"svg\")\n    .at({\n      width: width,\n      height: config.height\n    });\n\n  //Defining a group element for line chart\n  const g = svg.append(\"g\").at({\n    transform: `translate(${config.margin.left},${config.margin.top})`\n  });\n\n  // X-axis\n  // renders full year on January,\n  // short month names otherwise\n  g.append(\"g\")\n    .at({\n      class: \"axis axis--x\"\n    })\n    .translate([0, config.usableHeight])\n    .call(\n      d3\n        .axisBottom(config.xScale)\n        .ticks(config.ticksno)\n        .tickSizeOuter(0)\n        .tickFormat(function(dataset) {\n          if (d3.timeFormat(\"%-b\")(dataset) === \"Jan\") {\n            return d3.timeFormat(\"%Y\")(dataset);\n          } else {\n            return d3.timeFormat(\"%-b\")(dataset);\n          }\n        })\n    );\n\n  // Y-axis\n  // with more or less padding and ticks depending on viewport\n  g.append(\"g\")\n    .at({\n      class: \"axis axis--y\"\n    })\n    .call(\n      d3\n        .axisLeft(config.yScale)\n        .ticks(config.ticksno)\n        .tickSizeInner(-width)\n        .tickSizeOuter(0)\n        .tickFormat((d, i, n) => (n[i + 1] ? d : d + \"%\"))\n    );\n\n  g.selectAll(\"circle\")\n    .data(config.dataset)\n    .enter()\n    .append(\"circle\")\n    .at({\n      cx: d => config.xScale(d.date),\n      cy: d => config.yScale(d.poll),\n      r: config.circleRadius\n    })\n    .st({\n      opacity: 0.2,\n      fill: d =>\n        config.parties.filter(party => party.name.toLowerCase() === d.party)[0]\n          ? config.parties.filter(\n              party => party.name.toLowerCase() === d.party\n            )[0].color\n          : \"\"\n    });\n\n  // One set of dots for each party\n  // One line for each party\n  config.parties.forEach(party => {\n    const popline = d3\n      .line()\n      .x(d => config.xScale(d.date))\n      .y(d => config.yScale(d[party.name]))\n      .curve(d3.curveCardinal);\n\n    g.append(\"path\")\n      .datum(config.averages)\n      .at({\n        fill: \"none\",\n        stroke: \"#fff\",\n        strokeWidth: 3,\n        d: popline\n      });\n    g.append(\"path\")\n      .datum(config.averages)\n      .at({\n        fill: \"none\",\n        stroke: party.color,\n        strokeWidth: 1.5,\n        d: popline\n      });\n  });\n};\n\n// Quick parsing of the data we pass in\n// ie numbers as integers, dates as dates, etc.\n// Will trigger a re-render\nexport const generatePolls = polls => {\n  polls.forEach((d, i, o) => {\n    if (d.poll != \"NA\") {\n      d.date = new Date(d.date);\n      d.poll = +d.poll;\n    } else {\n      o.splice(i, 1);\n    }\n  });\n  return polls;\n};\n\nexport const generateAverages = (averages, parties) => {\n  averages.forEach((d, i) => {\n    d.date = new Date(d.date);\n    parties.forEach(party => {\n      d[party.name] = +d[party.name];\n    });\n  });\n  return averages;\n};\n"],"mappings":"AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgBA;;;;;;;;ACLA;;;;;;;;;;;;;AAaA;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACFA;;ACMA;;;;;AAKA;AACA;AACA;;;AAGA;;;AAQA;AACA;;;AAQA;;;AAGA;;;;;;;;;;AAeA;AACA;AACA;;;;ACrDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC+CA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA","sourceRoot":""}